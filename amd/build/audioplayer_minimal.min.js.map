{"version":3,"sources":["../src/audioplayer_minimal.js"],"names":["define","$","log","selectors","hiddenplayer","player","ppbutton","bar_front","backbutton","forwardbutton","timedisplay","play_icon_url","require","toUrl","pause_icon_url","skipinterval","init","opts","hplayer","debug","data","vplayer","duration","register_events","update_time","that","on","toggle_play","skip_back","skip_forward","css","text","formatAudioTime","console","paused","muted","play","then","catch","e","pause","percent","parseInt","currentTime","minutes","Math","floor","seconds","formattedTime","padStart"],"mappings":"AACAA,OAAM,qCAAC,CAAC,QAAD,CAAU,UAAV,CAAD,CAAwB,SAASC,CAAT,CAAYC,CAAZ,CAAiB,IACvCC,CAAAA,CAAS,CAAE,CACXC,YAAY,CAAE,8BADH,CAEXC,MAAM,CAAE,wBAFG,CAGXC,QAAQ,CAAE,2DAHC,CAIXC,SAAS,CAAE,yDAJA,CAKXC,UAAU,CAAE,gEALD,CAMXC,aAAa,CAAE,mEANJ,CAOXC,WAAW,CAAE,oDAPF,CAD4B,CAUvCC,CAAa,CAAGC,OAAO,CAACC,KAAR,CAAc,sCAAd,CAVuB,CAWvCC,CAAc,CAAGF,OAAO,CAACC,KAAR,CAAc,sCAAd,CAXsB,CAYvCE,CAAY,CAAE,EAZyB,CA6J3C,MA/IS,CACLC,IAAI,CAAE,cAASC,CAAT,CAAc,CAChB,KAAKC,OAAL,CAAejB,CAAC,CAACgB,CAAI,eAAL,CAAD,CAA0B,CAA1B,CAAf,CACAf,CAAG,CAACiB,KAAJ,CAAUF,CAAI,eAAd,EACAf,CAAG,CAACiB,KAAJ,CAAUF,CAAI,OAAd,EACAf,CAAG,CAACiB,KAAJ,CAAUF,CAAV,EAGA,GAAiC,CAA9B,EAAAhB,CAAC,CAAC,KAAKiB,OAAN,CAAD,CAAgBE,IAAhB,CAAqB,MAArB,CAAH,CAAmC,CAC/B,MACH,CAFD,IAEK,CACDnB,CAAC,CAAC,KAAKiB,OAAN,CAAD,CAAgBE,IAAhB,CAAqB,MAArB,CAA4B,CAA5B,CACH,CAED,KAAKC,OAAL,CAAcpB,CAAC,CAAC,IAAMgB,CAAI,OAAV,CAAuBd,CAAS,CAACE,MAAlC,CAAf,CACA,KAAKC,QAAL,CAAgBL,CAAC,CAAC,IAAMgB,CAAI,OAAV,CAAsBd,CAAS,CAACG,QAAjC,CAAjB,CACA,KAAKC,SAAL,CAAiBN,CAAC,CAAC,IAAMgB,CAAI,OAAV,CAAsBd,CAAS,CAACI,SAAjC,CAAlB,CACA,KAAKC,UAAL,CAAkBP,CAAC,CAAC,IAAMgB,CAAI,OAAV,CAAsBd,CAAS,CAACK,UAAjC,CAAnB,CACA,KAAKC,aAAL,CAAqBR,CAAC,CAAC,IAAMgB,CAAI,OAAV,CAAsBd,CAAS,CAACM,aAAjC,CAAtB,CACA,KAAKC,WAAL,CAAmBT,CAAC,CAAC,IAAMgB,CAAI,OAAV,CAAsBd,CAAS,CAACO,WAAjC,CAApB,CAEA,KAAKY,QAAL,CAAgB,KAAKJ,OAAL,CAAaI,QAA7B,CACApB,CAAG,CAACiB,KAAJ,CAAU,eAAe,KAAKG,QAA9B,EAEA,KAAKC,eAAL,GACA,KAAKC,WAAL,EACH,CA1BI,CA2BLD,eAAe,CAAE,0BAAU,CACvB,GAAIE,CAAAA,CAAI,CAAG,IAAX,CACAxB,CAAC,CAAC,KAAKK,QAAN,CAAD,CAAiBoB,EAAjB,CAAoB,OAApB,CAA4B,UAAU,CAClCD,CAAI,CAACE,WAAL,EACH,CAFD,EAGA1B,CAAC,CAAC,KAAKO,UAAN,CAAD,CAAmBkB,EAAnB,CAAsB,OAAtB,CAA8B,UAAU,CACpCD,CAAI,CAACG,SAAL,EACH,CAFD,EAGA3B,CAAC,CAAC,KAAKQ,aAAN,CAAD,CAAsBiB,EAAtB,CAAyB,OAAzB,CAAiC,UAAU,CACvCD,CAAI,CAACI,YAAL,EACH,CAFD,EAGA5B,CAAC,CAAC,KAAKiB,OAAN,CAAD,CAAgBQ,EAAhB,CAAmB,YAAnB,CAAgC,UAAU,CACtCD,CAAI,CAACD,WAAL,EACH,CAFD,EAGAvB,CAAC,CAAC,KAAKiB,OAAN,CAAD,CAAgBQ,EAAhB,CAAmB,OAAnB,CAA2B,UAAU,CACjCzB,CAAC,CAACwB,CAAI,CAACnB,QAAN,CAAD,CAAiBwB,GAAjB,CAAqB,kBAArB,CAAyCnB,CAAzC,EAEAV,CAAC,CAACwB,CAAI,CAACf,WAAN,CAAD,CAAoBqB,IAApB,CAAyBN,CAAI,CAACO,eAAL,CAAqBP,CAAI,CAACH,QAA1B,CAAzB,CACH,CAJD,EAKArB,CAAC,CAAC,KAAKiB,OAAN,CAAD,CAAgBQ,EAAhB,CAAmB,YAAnB,CAAgC,UAAU,CACtCO,OAAO,CAAC/B,GAAR,CAAY,YAAZ,CAA0BuB,CAAI,CAACP,OAAL,CAAaI,QAAvC,EACA,GAAGG,CAAI,CAACP,OAAL,CAAaI,QAAb,MAAH,CAAsC,CAElCG,CAAI,CAACH,QAAL,CAAcrB,CAAC,CAACwB,CAAI,CAACP,OAAN,CAAD,CAAgBE,IAAhB,CAAqB,UAArB,CACjB,CAHD,IAGM,CACFK,CAAI,CAACH,QAAL,CAAgBG,CAAI,CAACP,OAAL,CAAaI,QAChC,CACDG,CAAI,CAACD,WAAL,EACH,CATD,EAUAvB,CAAC,CAAC,KAAKiB,OAAN,CAAD,CAAgBQ,EAAhB,CAAmB,gBAAnB,CAAoC,UAAU,CAE1C,GAAGD,CAAI,CAACP,OAAL,CAAaI,QAAb,MAAH,CAAuC,CACnCG,CAAI,CAACH,QAAL,CAAgBG,CAAI,CAACP,OAAL,CAAaI,QAChC,CACJ,CALD,CAOH,CA/DI,CAgELK,WAAW,CAAE,sBAAU,CACnB,GAAIF,CAAAA,CAAI,CAAG,IAAX,CACA,GAAG,KAAKP,OAAL,CAAagB,MAAhB,CAAuB,CACnB,KAAKhB,OAAL,CAAaiB,KAAb,IACAF,OAAO,CAAC/B,GAAR,CAAY,KAAKgB,OAAjB,EACA,KAAKA,OAAL,CAAakB,IAAb,GAAoBC,IAApB,CAAyB,UAAU,CAC/BnC,CAAG,CAACiB,KAAJ,CAAU,uBAAV,EACAlB,CAAC,CAACwB,CAAI,CAACnB,QAAN,CAAD,CAAiBwB,GAAjB,CAAqB,kBAArB,CAAwChB,CAAxC,CACH,CAHD,EAGGwB,KAHH,CAGS,SAASC,CAAT,CAAW,CAChBrC,CAAG,CAACiB,KAAJ,CAAUoB,CAAV,CAAY,uBAAZ,CACH,CALD,CAMH,CATD,IASK,CACD,KAAKrB,OAAL,CAAasB,KAAb,GACAvC,CAAC,CAAC,KAAKK,QAAN,CAAD,CAAiBwB,GAAjB,CAAqB,mBAArB,CAA0CnB,CAA1C,CACH,CACJ,CA/EI,CAgFLa,WAAW,CAAE,sBAAU,CAEnB,GAAIiB,CAAAA,CAAO,CAAC,CAAZ,CACA,GAA6B,CAA1B,CAAAC,QAAQ,CAAC,KAAKpB,QAAN,CAAX,CAA+B,CAC3BmB,CAAO,CAA4C,GAAzC,EAAC,KAAKvB,OAAL,CAAayB,WAAb,CAAyB,KAAKrB,QAA/B,CAAV,CACA,GAAa,GAAV,CAAAmB,CAAH,CAAiB,CACbA,CAAO,CAAG,GACb,CACJ,CALD,IAKK,CACD,KAAKnB,QAAL,CAAc,CACjB,CAEDrB,CAAC,CAAC,KAAKM,SAAN,CAAD,CAAkBuB,GAAlB,CAAsB,OAAtB,CAA+BW,CAAO,CAAC,GAAvC,EAEA,OAAOA,CAAP,EACI,IAAK,EAAL,CACIxC,CAAC,CAAC,KAAKS,WAAN,CAAD,CAAoBqB,IAApB,CAAyB,KAAKC,eAAL,CAAqB,KAAKV,QAA1B,CAAzB,EACA,MACJ,IAAK,IAAL,CACIrB,CAAC,CAAC,KAAKS,WAAN,CAAD,CAAoBqB,IAApB,CAAyB,KAAKC,eAAL,CAAqB,KAAKV,QAA1B,CAAzB,EACA,MACJ,QACIrB,CAAC,CAAC,KAAKS,WAAN,CAAD,CAAoBqB,IAApB,CAAyB,KAAKC,eAAL,CAAqB,KAAKd,OAAL,CAAayB,WAAlC,EAAiD,GAAjD,CAAuD,KAAKX,eAAL,CAAqB,KAAKV,QAA1B,CAAhF,EARR,CAaA,GAAG,KAAKJ,OAAL,CAAayB,WAAb,CAA2B5B,CAA9B,CAA4C,CACxCd,CAAC,CAAC,KAAKO,UAAN,CAAD,CAAmBsB,GAAnB,CAAuB,SAAvB,CAAkC,KAAlC,CACH,CAFD,IAEK,CACD7B,CAAC,CAAC,KAAKO,UAAN,CAAD,CAAmBsB,GAAnB,CAAuB,SAAvB,CAAkC,MAAlC,CACH,CAED,GAAG,KAAKZ,OAAL,CAAayB,WAAb,CAA4B,KAAKrB,QAAL,CAAgBP,CAA/C,CAA8D,CAC1Dd,CAAC,CAAC,KAAKQ,aAAN,CAAD,CAAsBqB,GAAtB,CAA0B,SAA1B,CAAqC,KAArC,CACH,CAFD,IAEK,CACD7B,CAAC,CAAC,KAAKQ,aAAN,CAAD,CAAsBqB,GAAtB,CAA0B,SAA1B,CAAqC,MAArC,CACH,CACJ,CAtHI,CAuHLF,SAAS,CAAE,oBAAU,CACjB,GAAG,KAAKV,OAAL,CAAayB,WAAb,CAA2B5B,CAA9B,CAA4C,CACxC,KAAKG,OAAL,CAAayB,WAAb,CAA2B,KAAKzB,OAAL,CAAayB,WAAb,CAA2B5B,CACzD,CAFD,IAEK,CACD,KAAKG,OAAL,CAAayB,WAAb,CAA2B,CAC9B,CACJ,CA7HI,CA8HLd,YAAY,CAAE,uBAAU,CACpB,GAAG,KAAKX,OAAL,CAAayB,WAAb,CAA4B,KAAKrB,QAAL,CAAgBP,CAA/C,CAA8D,CAC1D,KAAKG,OAAL,CAAayB,WAAb,CAA2B,KAAKzB,OAAL,CAAayB,WAAb,CAA2B5B,CACzD,CAFD,IAEK,CACD,KAAKG,OAAL,CAAayB,WAAb,CAA2B,KAAKrB,QACnC,CACJ,CApII,CAqILU,eAAe,CAAE,yBAAUW,CAAV,CAAuB,IAC9BC,CAAAA,CAAO,CAAGC,IAAI,CAACC,KAAL,CAAWH,CAAW,CAAG,EAAzB,CADoB,CAE9BI,CAAO,CAAGF,IAAI,CAACC,KAAL,CAAWH,CAAW,CAAG,EAAzB,CAFoB,CAG9BK,CAAa,WAAM,CAAOJ,CAAP,KAAgBK,QAAhB,CAAyB,CAAzB,CAA4B,GAA5B,CAAN,aAA0C,CAAOF,CAAP,KAAgBE,QAAhB,CAAyB,CAAzB,CAA4B,GAA5B,CAA1C,CAHiB,CAIpC,MAAOD,CAAAA,CACV,CA1II,CAgJZ,CA9JK,CAAN","sourcesContent":["\ndefine(['jquery','core/log'], function($, log) {\n    var selectors ={\n        hiddenplayer: '_fpminimal_hiddenaudioplayer',\n        player: '_fpminimal_audioplayer',\n        ppbutton: '_fpminimal_audioplayer .fpminimal_audioplayer_play_button',\n        bar_front: '_fpminimal_audioplayer .fpminimal_audioplayer_bar_front',\n        backbutton: '_fpminimal_audioplayer .fpminimal_audioplayer_skip_button_back',\n        forwardbutton: '_fpminimal_audioplayer .fpminimal_audioplayer_skip_button_forward',\n        timedisplay: '_fpminimal_audioplayer .fpminimal_audioplayer_time'\n    }\n    var play_icon_url = require.toUrl('filter/poodll/pix/fpminimal_play.png');\n    var pause_icon_url = require.toUrl('filter/poodll/pix/fpminimal_stop.png');\n    var skipinterval =15;\n\n    var pr = {\n        init: function(opts){\n            this.hplayer = $(opts['player_element'])[0];\n            log.debug(opts['player_element']);\n            log.debug(opts['autoid']);\n            log.debug(opts);\n\n            //init can be called twice, why why\n            if($(this.hplayer).data('init')==1){\n                return;\n            }else{\n                $(this.hplayer).data('init',1);\n            }\n\n            this.vplayer= $('#' + opts['autoid'] + selectors.player);\n            this.ppbutton = $('#' + opts['autoid'] +selectors.ppbutton);\n            this.bar_front = $('#' + opts['autoid'] +selectors.bar_front);\n            this.backbutton = $('#' + opts['autoid'] +selectors.backbutton);\n            this.forwardbutton = $('#' + opts['autoid'] +selectors.forwardbutton);\n            this.timedisplay = $('#' + opts['autoid'] +selectors.timedisplay);\n\n            this.duration = this.hplayer.duration;\n            log.debug('duration is '+this.duration);\n\n            this.register_events();\n            this.update_time();\n        },\n        register_events: function(){\n            var that = this;\n            $(this.ppbutton).on('click',function(){\n                that.toggle_play();\n            });\n            $(this.backbutton).on('click',function(){\n                that.skip_back();\n            });\n            $(this.forwardbutton).on('click',function(){\n                that.skip_forward();\n            });\n            $(this.hplayer).on('timeupdate',function(){\n                that.update_time();\n            });\n            $(this.hplayer).on('ended',function(){\n                $(that.ppbutton).css('background-image', play_icon_url);\n                //reset the time display\n                $(that.timedisplay).text(that.formatAudioTime(that.duration));\n            });\n            $(this.hplayer).on('loadeddata',function(){\n                console.log(\"loadeddata\", that.hplayer.duration);\n                if(that.hplayer.duration === Infinity){\n                    //blobs dont do duration very well, so if its infinity use the time we stashed when recording\n                    that.duration=$(that.hplayer).data('duration');\n                }else {\n                    that.duration = that.hplayer.duration;\n                }\n                that.update_time();\n            });\n            $(this.hplayer).on('canplaythrough',function(){\n                //if we get the real duration here, set it\n                if(that.hplayer.duration !== Infinity) {\n                    that.duration = that.hplayer.duration;\n                }\n            });\n\n        },\n        toggle_play: function(){\n            var that = this;\n            if(this.hplayer.paused){\n                this.hplayer.muted=false;\n                console.log(this.hplayer);\n                this.hplayer.play().then(function(){\n                    log.debug('play promise resolved');\n                    $(that.ppbutton).css('background-image',pause_icon_url);\n                }).catch(function(e){\n                    log.debug(e,'play promise rejected');\n                });\n            }else{\n                this.hplayer.pause();\n                $(this.ppbutton).css('background-image:', play_icon_url);\n            }\n        },\n        update_time: function(){\n            //update the progress bar\n            var percent=0;\n            if(parseInt(this.duration) > 0){\n                percent = (this.hplayer.currentTime/this.duration)*100;\n                if(percent > 100){\n                    percent = 100;\n                }\n            }else{\n                this.duration=0;\n            }\n\n            $(this.bar_front).css('width', percent+'%');\n            //update the time display\n            switch(percent) {\n                case 0:\n                    $(this.timedisplay).text(this.formatAudioTime(this.duration));\n                    break;\n                case 100:\n                    $(this.timedisplay).text(this.formatAudioTime(this.duration));\n                    break;\n                default:\n                    $(this.timedisplay).text(this.formatAudioTime(this.hplayer.currentTime) + '/' + this.formatAudioTime(this.duration));\n            }\n\n\n            //handle back and forward buttons\n            if(this.hplayer.currentTime < skipinterval) {\n                $(this.backbutton).css('opacity', '50%');\n            }else{\n                $(this.backbutton).css('opacity', '100%');\n            }\n\n            if(this.hplayer.currentTime > (this.duration - skipinterval)) {\n                $(this.forwardbutton).css('opacity', '50%');\n            }else{\n                $(this.forwardbutton).css('opacity', '100%');\n            }\n        },\n        skip_back: function(){\n            if(this.hplayer.currentTime > skipinterval) {\n                this.hplayer.currentTime = this.hplayer.currentTime - skipinterval;\n            }else{\n                this.hplayer.currentTime = 0;\n            }\n        },\n        skip_forward: function(){\n            if(this.hplayer.currentTime < (this.duration - skipinterval)) {\n                this.hplayer.currentTime = this.hplayer.currentTime + skipinterval;\n            }else{\n                this.hplayer.currentTime = this.duration;\n            }\n        },\n        formatAudioTime: function (currentTime) {\n            const minutes = Math.floor(currentTime / 60);\n            const seconds = Math.floor(currentTime % 60);\n            const formattedTime = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n            return formattedTime;\n        }\n\n    };\n\n    //init the player\n    return pr;\n});\n"],"file":"audioplayer_minimal.min.js"}